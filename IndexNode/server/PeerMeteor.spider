use :node;

var fs = ::Meteor.npmRequire('fs');
var os = ::Meteor.npmRequire('os');

var SERVER_DELAY = 500;//ms
::Meteor.startup(fn() {

        ::getOwnIPAndPort();
        var host = "http://IndexNode.meteor.com";
        var server = ::DDP.connect(host);
        var status = ::Async.runSync(fn(done) {
            setTimeout(fn(){ done(null,server.status());},SERVER_DELAY);//enough time to allow connection
        });

        if status.result.connected {
             console.log("Connected");
        } else{
             console.log("Not Connected");
        }
});


::Meteor.methods({
    findFile: fn(fileName) {
         this.unblock;
        console.log("Finding the File Part Locations for: \(fileName.fileName)" );

        var file = ::Files.findOne({
            "fileName": fileName.fileName
        });

        console.log(JSON.stringify(file));
        //Grab file part from one of the peers that has it.
        var chunks = file.chunks.map(fn(currentValue, index, array) {
            return currentValue[Math.floor((Math.random() * currentValue.length))];
        });
        chunks = chunks.map(fn(currentValue, index, array) {
            return {
                "chunkNumber": index,
                "chunk": currentValue
            };
        });

        console.log(JSON.stringify(chunks));

        return {
            "fileName": fileName.fileName,
            "chunks": chunks
        };
    },

        getReplacementChunk: fn(info) {
         this.unblock;
        console.log("Finding the New File Part Location for: \(info.fileName): Chunk \(info.chunkNumber)" );

        var file = ::Files.findOne({
            "fileName": info.fileName
        });

        console.log(JSON.stringify(file));
        //Grab file part from one of the peers that has it.
        var chunkLocations = file.chunks[info.chunkNumber];


        chunk = { "chunkNumber": index,
                 "chunk": chunkLocations[Math.floor((Math.random() * chunkLocations.length))]
            };
   

        console.log(JSON.stringify(chunk));

        return {
            "fileName": fileName.fileName,
            "chunk": chunk
        };
    },


    registerFile: fn(fileName, numberOfParts, hostNameWithPort) {
         this.unblock;
        var file = ::Files.findOne({
            "fileName": fileName
        });

        if !file? {
            //If file has not already been registered in the Index node
            var fileToInsert = {
                "fileName": fileName,
                "chunks": []
            };
             console.log("registering new File with \(numberOfParts) parts");

            for var i = 0; i < numberOfParts; i++ {
                fileToInsert.chunks.push([hostNameWithPort]);
            }

            ::Files.insert(fileToInsert);
        } else {
            //else add  to the file meta data that a new client has this file avalible
            for var i = 0; i <  file.chunks.length; i++ {
                file.chunks[i].push(hostNameWithPort);
            }

            ::Files.update(file._id,file);
        }
    },
});


 fn getOwnIPAndPort() {
    var interfaces = os.networkInterfaces();
    var addresses = [];
    for  k in interfaces {
        for  k2 in interfaces[k] {
            var address = interfaces[k][k2];
            if address.family == 'IPv4' && !address.internal {
                addresses.push(address.address);

            }
        }
    }

    console.log("\(addresses[0]):\(process.env.PORT)");
    return "\(addresses[0]):\(process.env.PORT)";

  } 

