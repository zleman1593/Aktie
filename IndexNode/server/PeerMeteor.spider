

//Load external Libraries
use :node;
var fs = ::Meteor.npmRequire('fs');
var os = ::Meteor.npmRequire('os');

//Timeout on connection
var SERVER_DELAY = 1500;//ms

//Backup Partner Index to Self at 12:01 AM everyday
var backupTask = new ::ScheduledTask('at 12:01 am', fn () {
    ::backupPartnerToSelf();
    console.log("Backup was run.");
});

var heartbeatCheck = new ::ScheduledTask('every 30 sec', fn () {

        if ::PartnerIndex.status().connected {
            console.log("Partner is healthy!");
        } else{
            console.log("Partner is DOWN!");
            console.log("Spawning replacement!");
            //Testing code removed as this part depended on where the code is being run. 
            //Spawning new instaces is a bit complicated and different locally vs on some servers
            //Currently disabled restoration feature. This allows other features to work normally.  
            // Here a new instacne would be created and a ref to the new parter would be stored in PartnerIndex

            //Now it has new partner freshly created
            ::PartnerIndex.call('restoreMyself', getOwnIPAndPort, fn(error, result) {
                if error? {
                    console.log(error.reason);
                           throw new ::Meteor.Error(600, "Error 600: Could Not restore partner", "Partner could not be restored.");
                } else {
                    console.log("Partner is starting to be restored");
                }
            });
            

            console.log("Restoring replacement!");
        }
});

//Keeps track of the partner Index Node
var PartnerIndex;

//When the Index Node Starts
::Meteor.startup(fn() {
        //Init backup schedule
        backupTask.start();

        heartbeatCheck.start();
        //Report own Address to standard out
        ::getOwnIPAndPort();
        //Connect to partner and maintain heartbeat
        //For testing purposes this is another Index Node
        var partnerAddress = "http://IndexNode.meteor.com";
        ::PartnerIndex = ::DDP.connect(partnerAddress);

         //Did it connect to its partner
        var status = ::Async.runSync(fn(done) {
            setTimeout(fn(){ done(null,::PartnerIndex.status());},SERVER_DELAY);//enough time to allow connection
        });

        if status.result.connected {
             console.log("Connected to partner");
        } else{
             console.log("Not Connected to partner");
        }
});

//API that other Index Nodes and client nodes use to call methods on Index Nodes
::Meteor.methods({
    //Client nodes call this to get the file chunk location info
    findFile: fn(fileName) {
        //Allow other DDP messages to be processed at the same time
        this.unblock;

        console.log("Finding the File Part Locations for: \(fileName.fileName)" );

        var file = ::Files.findOne({
            "fileName": fileName.fileName
        });


        if !file?{
                 throw new ::Meteor.Error(240, "Error 320: Could Not find file", "A file by this name has not been registered.");
        }

        console.log(JSON.stringify(file));

        var dictOfPeersUsedSoFar = {};

        //Grab file part from one of the peers that has it. Even distribution of chunks to avalible peers.
        var chunks = file.chunks.map(fn(currentValue, index, array) {

                var bestPeerToUse;
                var bestPeerToUseIndex;
                var bestPeerToUseCount = Number.MAX_VALUE;

                 for var i = 0; i < currentValue.length; i++ {

                    var machineName = "\(currentValue[i])";
                    var machineCount = dictOfPeersUsedSoFar[machineName];
                   
                       if !machineCount? {
                            //If peer hasn't been used for this transfer at all yet, use it.
                            dictOfPeersUsedSoFar[machineName] = 1;
                            return currentValue[i];
                       } else if machineCount < bestPeerToUseCount{
                            //If this peer is being used less than other peers looked at so far.
                            bestPeerToUse =  machineName;
                            bestPeerToUseCount = machineCount;
                            bestPeerToUseIndex = i;
                       }
                 }
            
            //update the dictionary with the peer that was used for this chunk
            dictOfPeersUsedSoFar[bestPeerToUse] += 1;
            //Use optimal peer for this chunk
            return currentValue[bestPeerToUseIndex];
        });


        chunks = chunks.map(fn(currentValue, index, array) {
            return {
                "chunkNumber": index,
                "chunk": currentValue
            };
        });


        return {
            "fileName": fileName.fileName,
            "chunks": chunks
        };
    },
    //Client Node Calls this with the chunk it can't obtain and the offline peer
    getReplacementChunk: fn(info) {
         this.unblock;
        console.log("Finding the New File Part Location for: \(info.fileName): Chunk \(info.chunkNumber)" );
        //Get the file metadata object
        var file = ::Files.findOne({
            "fileName": info.fileName
        });

        //Grab file part from one of the peers that has it.
        var chunkLocations = file.chunks[info.chunkNumber];


        var chunk = { "chunkNumber": info.chunkNumber,
                      "chunk": chunkLocations[Math.floor((Math.random() * chunkLocations.length))]
        };


        var downHost = info.badMachine;

        ::Meteor.defer(fn(){

            //remove downHost from file meta data
            var cleanedChunks = file.chunks.map(fn(currentValue, index, array) {

                 var clean = currentValue.filter(fn(host) { return host != downHost ; });

                 return  clean;

        });

        file.chunks = cleanedChunks;

        //Remove file if no avalible peers
        if cleanedChunks.length != 0 {
                ::Files.update(file._id,file);

          } else {
                ::Files.remove(file._id);
             }

            });

        //Return the replacement information
        return {
            "fileName": info.fileName,
            "chunk": chunk
        };
},


    registerFile: fn(fileName, numberOfParts, hostNameWithPort) {
        this.unblock;
 
        var file = ::Files.findOne({
            "fileName": fileName
        });

        if !file? {
            //If file has not already been registered in the Index node
            var fileToInsert = {
                "fileName": fileName,
                "chunks": []
            };

            console.log("registering new File with \(numberOfParts) parts");

            for var i = 0; i < numberOfParts; i++ {
                fileToInsert.chunks.push([hostNameWithPort]);
            }

            ::Files.insert(fileToInsert);

        } else {
            //else add  to the file meta data that a new client has this file avalible
                for var i = 0; i <  file.chunks.length; i++ {
                    //Don't allow duplicate entries
                    if   !::_.contains(file.chunks[i],hostNameWithPort) {
                            file.chunks[i].push(hostNameWithPort);
                    } else {
                           throw new::Meteor.Error(240, 'Error 240: Already registered', 'A file by this name has already been registered.');
                           return;
                    }
                }

                ::Files.update(file._id,file);
        }
    },
        //Regster that a client node can now share a chunk
     registerFileChunk: fn(fileName, chunkNumber, hostNameWithPort) {
        console.log("fileName: \(fileName). chunkNumber: \(chunkNumber)");
        //this.unblock;
        var file = ::Files.findOne({
            "fileName": fileName
        });
        if file? {
        file.chunks[chunkNumber].push(hostNameWithPort);     
         ::Files.update(file._id,file);
        } else{
              throw new::Meteor.Error(240, 'Error 240: Already registered', 'A file by this name has already been registered.');
        }
    },


    //Called by the partner of this new node replacement
     restoreMyself: fn(partnerIP) {
        this.unblock;
        console.log("Setting ref to partner");

        ::PartnerIndex = ::DDP.connect(partnerIP);

         //Did it connect to its partner
        var status = ::Async.runSync(fn(done) {
            setTimeout(fn(){ done(null,::PartnerIndex.status());},SERVER_DELAY);//enough time to allow connection
        });

        if status.result.connected {
             console.log("Connected to partner that is going to restore me");
        } else{
             console.log("Not Connected to partner that is going to restore me");
        }
        console.log("Restoring myself form Parner");
        restoreSelfFromPartner();
    },

});


 fn getOwnIPAndPort() {
    var interfaces = os.networkInterfaces();
    var addresses = [];
    for  k in interfaces {
        for  k2 in interfaces[k] {
            var address = interfaces[k][k2];
            if address.family == 'IPv4' && !address.internal {
                addresses.push(address.address);

            }
        }
    }

    console.log("\(addresses[0]):\(process.env.PORT)");
    return "\(addresses[0]):\(process.env.PORT)";

  } 


fn backupPartnerToSelf(){
    //Remove old Backup
    ::BackupForPartner.remove({});
    //Create new backup
    ::PartnerIndex.subscribe("allFiles");

    var AllFilesToBeBackedUp = new ::Mongo.Collection('toBackup', {connection: ::PartnerIndex});

    var cursor = AllFilesToBeBackedUp.find();

     cursor.forEach(fn(doc){
         ::BackupForPartner.insert(doc);
    });
 }


fn restoreSelfFromPartner(){
   
    ::PartnerIndex.subscribe("allBackupFiles");

    var AllBackedUpFiles = new ::Mongo.Collection('theBackup', {connection: ::PartnerIndex});

    var cursor = AllBackedUpFiles.find();

     cursor.forEach(fn(doc){
         ::Files.insert(doc);
    });

    //PartnerIndex.unsubscribe("allBackupFiles");
}


