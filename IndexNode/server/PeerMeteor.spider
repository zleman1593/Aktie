use :node;

var fs = ::Meteor.npmRequire('fs');
var os = ::Meteor.npmRequire('os');

::Meteor.startup(fn() {
    // Code to run once the first time the server is ever started. Creates a demo file reference
    /*if (::Files.find().count() < 5) {

        var demoFile = {
            "fileName": "demo.png",
            "chunks": [
                ["http://localhost:3500", "http://localhost:3500"],
                ["http://localhost:4500", "http://localhost:4500"]
            ]
        };
        ::Files.insert(demoFile);

        var demoFile2 = {
            "fileName": "favicon.ico",
            "chunks": [
                ["http://localhost:3500", "http://localhost:3500"],
                ["http://localhost:4500", "http://localhost:4500"]
            ]
        };
        ::Files.insert(demoFile2);
    }


var interfaces = os.networkInterfaces();
var addresses = [];
for  k in interfaces {
    for  k2 in interfaces[k] {
        var address = interfaces[k][k2];
        if address.family == 'IPv4' && !address.internal {
            addresses.push(address.address);
        }
    }
}

console.log(addresses);*/
});


::Meteor.methods({
    findFile: fn(fileName) {
         this.unblock;
        console.log("Finding the File Part Locations for: \(fileName.fileName)" );

        var file = ::Files.findOne({
            "fileName": fileName.fileName
        });

        console.log(JSON.stringify(file));
        //Grab file part from one of the peers that has it.
        var chunks = file.chunks.map(fn(currentValue, index, array) {
            return currentValue[Math.floor((Math.random() * currentValue.length))];
        });
        chunks = chunks.map(fn(currentValue, index, array) {
            return {
                "chunkNumber": index,
                "chunk": currentValue
            };
        });

        console.log(JSON.stringify(chunks));

        return {
            "fileName": fileName.fileName,
            "chunks": chunks
        };
    },


    registerFile: fn(fileName, numberOfParts, hostNameWithPort) {
         this.unblock;
        var file = ::Files.findOne({
            "fileName": fileName
        });

        if !file? {
            //If file has not already been registered in the Index node
            var fileToInsert = {
                "fileName": fileName,
                "chunks": []
            };
             console.log("registering new File with \(numberOfParts) parts");

            for var i = 0; i < numberOfParts; i++ {
                fileToInsert.chunks.push([hostNameWithPort]);
            }

            ::Files.insert(fileToInsert);
        } else {
            //else add  to the file meta data that a new client has this file avalible
            for var i = 0; i <  file.chunks.length; i++ {
                file.chunks[i].push(hostNameWithPort);
            }

            ::Files.update(file._id,file);
        }

    },



});
