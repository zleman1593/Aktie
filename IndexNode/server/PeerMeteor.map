$traceurRuntime.ModuleStore.getAnonymousModule(function() {
  "use strict";
  var fs = Meteor.npmRequire("fs");
  Meteor.startup(function() {
    if (Files.find().count() < 2) {
      var demoFile = {
        "fileName": "demo.png",
        "chunks": [["http://localhost:3500", "http://localhost:3500"], ["http://localhost:4500", "http://localhost:4500"]]
      };
      Files.insert(demoFile);
      var demoFile2 = {
        "fileName": "favicon.ico",
        "chunks": [["http://localhost:3500", "http://localhost:3500"], ["http://localhost:4500", "http://localhost:4500"]]
      };
      Files.insert(demoFile2);
    }
  });
  Meteor.methods({
    findFile: function(fileName) {
      console.log("Finding the File Part Locations for: " + fileName.fileName);
      var file = Files.findOne({"fileName": fileName.fileName});
      console.log(JSON.stringify(file));
      var chunks = file.chunks.map(function(currentValue, index, array) {
        return currentValue[Math.floor(Math.random() * currentValue.length)];
      });
      chunks = chunks.map(function(currentValue, index, array) {
        return {
          "chunkNumber": index,
          "chunk": currentValue
        };
      });
      console.log(JSON.stringify(chunks));
      return {
        "fileName": fileName.fileName,
        "chunks": chunks
      };
    },
    registerFile: function(fileName, numberOfParts, hostNameWithPort) {
      var file = Files.findOne({"fileName": fileName});
      if (!(typeof file !== "undefined" && file !== null)) {
        var fileToInsert = {
          "fileName": fileName,
          "chunks": []
        };
        for (var i = 0; i < numberOfParts; i++) {
          fileToInsert.chunks.push([hostNameWithPort]);
        }
        Files.insert(fileToInsert);
      } else {
        for (var i$__0 = 0; i$__0 < numberOfParts; i$__0++) {
          file.chunks[i$__0].push(hostNameWithPort);
        }
        Files.update(file._id, file);
      }
    }
  });
  return {};
});

//# sourceMappingURL=PeerMeteor.map
